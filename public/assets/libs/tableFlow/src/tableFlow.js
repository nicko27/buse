// src/tableFlow.js

// Importe le gestionnaire d'instances centralis√©
import { instanceManager } from './instanceManager.js';

/**
 * Classe principale TableFlow.
 * Agit comme une fa√ßade pour cr√©er et interagir avec une instance de table g√©r√©e
 * via InstanceManager et TableInstance.
 * @class TableFlow
 */
export default class TableFlow {
    /**
     * Cr√©e une instance de TableFlow et initialise la gestion de la table associ√©e.
     * @param {object} options - Options de configuration pour la table et les plugins.
     * @param {string} options.tableId - ID requis de l'√©l√©ment <table> HTML.
     * @param {object} [options.plugins={}] - Configuration des plugins (ex: { names: ['Sort', 'Edit'], sort: {...} }).
     * @param {string} [options.pluginsPath='../plugins'] - Chemin vers le dossier des plugins.
     * @param {boolean} [options.debug=false] - Active les logs de d√©bogage.
     * @param {number} [options.verbosity=0] - Niveau de verbosit√© des logs (0: erreurs, 1: +succ√®s, 2: +debug).
     * @param {object} [options.notifications={}] - Fonctions pour afficher les notifications (info, warning, success, error).
     * @param {boolean} [options.wrapCellsEnabled=true] - Activer l'enveloppement des cellules <td>.
     * @param {boolean} [options.wrapHeadersEnabled=true] - Activer l'enveloppement des en-t√™tes <th>.
     * @param {string} [options.wrapCellClass='cell-wrapper'] - Classe CSS pour le wrapper de cellule.
     * @param {string} [options.wrapHeaderClass='head-wrapper'] - Classe CSS pour le wrapper d'en-t√™te.
     * @throws {Error} Si tableId est manquant ou si l'initialisation de l'instance √©choue.
     */
    constructor(options = {}) {
        /** @type {object} */
        this.options = {
            plugins: {}, // Initialiser comme objet vide par d√©faut
            pluginsPath: '../plugins',
            debug: false,
            verbosity: 0,
            notifications: {},
            wrapCellsEnabled: true,
            wrapHeadersEnabled: true,
            wrapCellClass: 'cell-wrapper',
            wrapHeaderClass: 'head-wrapper',
            ...options // Fusionner avec les options fournies
        };

        // Configurer le syst√®me de journalisation (logger)
        // Ce logger sera potentiellement pass√© √† InstanceManager et TableInstance
        this.logger = this._setupLogger(this.options);

        /** @type {string} */
        this.tableId = this.options.tableId;

        /** @type {TableInstance | null} */
        this.tableInstance = null; // R√©f√©rence √† l'instance g√©r√©e par instanceManager

        // V√©rification initiale de tableId
        if (!this.tableId) {
            const error = new Error("L'option 'tableId' est requise pour initialiser TableFlow.");
            this.logger.error(error.message);
            throw error; // Arr√™ter l'ex√©cution si tableId manque
        }

        // --- Initialisation D√©l√©gu√©e ---
        // L'initialisation r√©elle (chargement plugins, wrappers, etc.)
        // est maintenant g√©r√©e par instanceManager.createInstance -> TableInstance.init()
        // On stocke la promesse d'initialisation pour pouvoir l'attendre si n√©cessaire.
        /** @type {Promise<TableInstance>} */
        this._initializationPromise = this._initializeInstance();

        // Log de d√©but d'initialisation
        this.logger.info(`[TableFlow] Initialisation demand√©e pour la table #${this.tableId}...`);

        // G√©rer les erreurs d'initialisation non captur√©es
        this._initializationPromise.catch(error => {
             // Log d√©j√† fait dans instanceManager/TableInstance, mais on peut ajouter un log TableFlow
             this.logger.error(`[TableFlow] √âchec final de l'initialisation pour #${this.tableId}. L'instance n'est pas utilisable.`, error);
             // L'erreur originale est d√©j√† propag√©e par _initializeInstance
        });
    }

    /**
     * Met en place le logger bas√© sur les options.
     * @param {object} options - Les options fournies au constructeur.
     * @returns {object} L'instance du logger.
     * @private
     */
    _setupLogger(options) {
        // Utiliser le logger fourni si disponible, sinon cr√©er un logger bas√© sur console
        if (options.logger) {
            return options.logger;
        }

        const debugEnabled = options.debug || options.verbosity > 1;
        const infoEnabled = options.debug || options.verbosity > 0;

        // Cr√©er un objet logger simple
        const logger = {
            error: (message, data) => {
                console.error(`[TableFlow] ‚ùå ERREUR: ${message}`, data ?? '');
                this.notify('error', message); // Appelle la notification configur√©e
            },
            warn: (message, data) => {
                console.warn(`[TableFlow] ‚ö†Ô∏è ATTENTION: ${message}`, data ?? '');
                this.notify('warning', message);
            },
            info: (message, data) => {
                if (infoEnabled) {
                    console.info(`[TableFlow] ‚ÑπÔ∏è INFO: ${message}`, data ?? '');
                }
                 // Ne pas notifier pour chaque info par d√©faut, sauf si explicitement voulu
                 // this.notify('info', message);
            },
            debug: (message, data) => {
                if (debugEnabled) {
                    console.log(`[TableFlow] üîç DEBUG: ${message}`, data ?? '');
                }
            },
            success: (message, data) => {
                if (infoEnabled) { // Log succ√®s si verbosit√© > 0
                    console.log(`[TableFlow] ‚úÖ SUCC√àS: ${message}`, data ?? '');
                }
                this.notify('success', message);
            }
        };
        return logger;
    }

    /**
     * Appelle instanceManager pour cr√©er et initialiser l'instance de table.
     * Stocke la r√©f√©rence √† l'instance une fois initialis√©e.
     * @returns {Promise<TableInstance>} La promesse r√©solue avec l'instance initialis√©e.
     * @private
     * @throws {Error} Si l'initialisation √©choue.
     */
    async _initializeInstance() {
        try {
            // Passer le logger configur√© √† instanceManager
            instanceManager.setLogger(this.logger);
            // Cr√©er (ou obtenir) et initialiser l'instance via le manager
            // Passe toutes les options pour que TableInstance puisse les utiliser
            const instance = await instanceManager.createInstance(this.tableId, this.options);
            this.tableInstance = instance; // Stocker la r√©f√©rence
            this.logger.success(`[TableFlow] Instance pour #${this.tableId} pr√™te.`);
            return instance;
        } catch (error) {
            // L'erreur est d√©j√† loggu√©e par instanceManager ou TableInstance
            // On la propage pour que l'appelant de new TableFlow() soit inform√©
            throw error;
        }
    }

    /**
     * Retourne une promesse qui r√©sout lorsque l'instance TableFlow est initialis√©e.
     * Utile pour s'assurer que l'instance et ses plugins sont pr√™ts avant d'interagir.
     * @returns {Promise<TableFlow>} La promesse r√©sout avec l'instance TableFlow elle-m√™me.
     */
    ready() {
        // Retourne la promesse stock√©e, mais r√©sout avec 'this' (l'instance TableFlow)
        return this._initializationPromise.then(() => this);
    }

    // --- M√©thodes API D√©l√©gu√©es √† TableInstance ---
    // Ces m√©thodes v√©rifient que l'initialisation est termin√©e avant de d√©l√©guer.

    /**
     * V√©rifie si l'instance est initialis√©e et log une erreur si ce n'est pas le cas.
     * @returns {boolean} True si l'instance est pr√™te, false sinon.
     * @private
     */
    _checkReady() {
        if (!this.tableInstance) {
            this.logger.error(`[TableFlow #${this.tableId}] Tentative d'appel API avant la fin de l'initialisation ou apr√®s un √©chec.`);
            return false;
        }
        return true;
    }

    /**
     * R√©cup√®re l'instance d'un plugin actif pour cette table.
     * @param {string} name - Le nom du plugin (insensible √† la casse).
     * @returns {object | null} L'instance du plugin ou null si non trouv√© ou non initialis√©.
     */
    getPlugin(name) {
        if (!this._checkReady()) return null;
        // La m√©thode getPlugin de TableInstance g√®re d√©j√† le cas o√π le plugin n'est pas trouv√©
        return this.tableInstance.getPlugin(name);
    }

    /**
     * Appelle la m√©thode `refresh()` sur tous les plugins actifs de l'instance.
     * @returns {Promise<void>}
     */
    async refreshPlugins() {
        if (!this._checkReady()) return;
        // Utilise le pluginManager de l'instance associ√©e
        await this.tableInstance.pluginManager.refreshAll();
    }

    /**
     * Marque une ligne comme sauvegard√©e (met √† jour les valeurs initiales).
     * @param {HTMLTableRowElement} row - L'√©l√©ment TR de la ligne.
     * @param {object} [options={}] - Options √† passer aux plugins et √† l'√©v√©nement row:saved.
     */
    markRowAsSaved(row, options = {}) {
        if (!this._checkReady()) return;
        // D√©l√©guer √† la m√©thode de TableInstance si elle existe
        if (typeof this.tableInstance.markRowAsSaved === 'function') {
             this.tableInstance.markRowAsSaved(row, options);
        } else {
             // Fallback ou impl√©mentation si la m√©thode n'est pas sur TableInstance
             this.logger.warn(`[TableFlow #${this.tableId}] La m√©thode markRowAsSaved n'est pas impl√©ment√©e sur TableInstance.`);
             // Logique de base (peut √™tre d√©plac√©e dans TableInstance)
             if (!row) return;
             row.classList.remove(this.options.modifiedClass || 'modified');
             // Mettre √† jour les data-initial-value (logique plus complexe n√©cessaire ici)
             this.logger.debug(`[TableFlow Fallback] Ligne ${row.id} marqu√©e comme sauvegard√©e (basique).`);
             // D√©clencher l'√©v√©nement
             this.tableInstance.element?.dispatchEvent(new CustomEvent('row:saved', { detail: { row, options, rowId: row.id } }));
        }
    }

    /**
     * Ajoute une nouvelle ligne au tableau.
     * @param {object | Array} [data={}] - Donn√©es pour la nouvelle ligne (objet {columnId: value} ou tableau [value1, value2]).
     * @param {'start' | 'end'} [position='end'] - O√π ajouter la ligne ('start' ou 'end').
     * @returns {HTMLTableRowElement | null} L'√©l√©ment TR ajout√© ou null en cas d'√©chec.
     */
    addRow(data = {}, position = 'end') {
        if (!this._checkReady()) return null;
        // D√©l√©guer √† TableInstance si la m√©thode existe
        if (typeof this.tableInstance.addRow === 'function') {
            return this.tableInstance.addRow(data, position);
        } else {
            this.logger.error(`[TableFlow #${this.tableId}] La m√©thode addRow n'est pas impl√©ment√©e sur TableInstance.`);
            return null;
        }
    }

    /**
     * Supprime une ligne du tableau.
     * @param {HTMLTableRowElement | string} rowOrId - L'√©l√©ment TR de la ligne ou son ID.
     * @returns {boolean} True si la suppression a r√©ussi, false sinon.
     */
    removeRow(rowOrId) {
        if (!this._checkReady()) return false;
         // D√©l√©guer √† TableInstance si la m√©thode existe
         if (typeof this.tableInstance.removeRow === 'function') {
            return this.tableInstance.removeRow(rowOrId);
        } else {
            this.logger.error(`[TableFlow #${this.tableId}] La m√©thode removeRow n'est pas impl√©ment√©e sur TableInstance.`);
            return false;
        }
    }

    /**
     * R√©cup√®re les donn√©es d'une ligne sp√©cifique.
     * @param {HTMLTableRowElement | string} rowOrId - L'√©l√©ment TR de la ligne ou son ID.
     * @returns {object | null} Un objet { columnId: value } ou null si la ligne n'est pas trouv√©e.
     */
    getRowData(rowOrId) {
        if (!this._checkReady()) return null;
        // D√©l√©guer √† TableInstance si la m√©thode existe
        if (typeof this.tableInstance.getRowData === 'function') {
            return this.tableInstance.getRowData(rowOrId);
        } else {
            this.logger.error(`[TableFlow #${this.tableId}] La m√©thode getRowData n'est pas impl√©ment√©e sur TableInstance.`);
            return null;
        }
    }

    /**
     * R√©cup√®re toutes les lignes actuellement dans le tbody.
     * @returns {Array<HTMLTableRowElement>} Un tableau des √©l√©ments TR.
     */
    getAllRows() {
        if (!this._checkReady()) return [];
         // D√©l√©guer √† TableInstance si la m√©thode existe
         if (typeof this.tableInstance.getAllRows === 'function') {
            return this.tableInstance.getAllRows();
        } else {
             // Fallback
             return Array.from(this.tableInstance.element?.querySelectorAll('tbody tr') ?? []);
        }
    }

     /**
     * R√©cup√®re les lignes actuellement visibles (non masqu√©es par CSS ou filtrage).
     * @returns {Array<HTMLTableRowElement>} Un tableau des √©l√©ments TR visibles.
     */
    getVisibleRows() {
        if (!this._checkReady()) return [];
        // D√©l√©guer √† TableInstance si la m√©thode existe
        if (typeof this.tableInstance.getVisibleRows === 'function') {
            return this.tableInstance.getVisibleRows();
        } else {
             // Fallback simple (ne prend pas en compte le filtrage complexe)
             return Array.from(this.tableInstance.element?.querySelectorAll('tbody tr') ?? [])
                 .filter(row => row.style.display !== 'none');
        }
    }

    /**
     * D√©truit l'instance TableFlow et l'instance de table associ√©e.
     * @returns {Promise<void>}
     */
    async destroy() {
        this.logger.info(`[TableFlow] Destruction demand√©e pour #${this.tableId}...`);
        // Attendre que l'initialisation soit termin√©e (ou ait √©chou√©) avant de d√©truire
        try {
            await this._initializationPromise; // Attend la fin de l'init
        } catch (error) {
            // L'initialisation a √©chou√©, mais on tente quand m√™me de nettoyer via instanceManager
            this.logger.warn(`[TableFlow #${this.tableId}] Destruction apr√®s √©chec d'initialisation.`);
        }

        // Utiliser instanceManager pour d√©truire l'instance g√©r√©e
        if (this.tableId) {
            await instanceManager.destroyInstance(this.tableId);
        }
        this.tableInstance = null; // Effacer la r√©f√©rence
        this.logger.info(`[TableFlow] Instance pour #${this.tableId} d√©truite.`);
    }

    /**
     * Affiche une notification en utilisant le syst√®me configur√©.
     * @param {'info' | 'warning' | 'success' | 'error'} type - Le type de notification.
     * @param {string} message - Le message √† afficher.
     */
    notify(type, message) {
        try {
            const notificationCallback = this.options.notifications?.[type];
            if (typeof notificationCallback === 'function') {
                notificationCallback(message);
            } else if (!this.options.notifications || Object.keys(this.options.notifications).length === 0) {
                // Pas de log si aucun syst√®me de notif n'a √©t√© fourni, pour √©viter le bruit
            } else {
                // Log si un syst√®me de notif est fourni mais manque le type sp√©cifique
                this.logger.warn?.(`[TableFlow] Type de notification non g√©r√©: '${type}'`);
            }
        } catch (error) {
            console.error(`[TableFlow] Erreur interne lors de la notification (${type}): ${error.message}`);
        }
    }
}
