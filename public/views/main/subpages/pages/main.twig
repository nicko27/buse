<div class="block" id="configuration">
    <div class="block__title glass">
        <div class="block__title-left">
            Gestion des Pages pour l'ordonnancement
            <a onclick="table.addRow([],'start')">
                <i class="fa fa-circle-plus"></i>
            </a>
        </div>
    </div>

    <div class="block__content flex-h">
        <div class="block__buttons">

        </div>
        <table id="configurationTbl">
            <thead>
                <tr>
                    <th id="id" th-hide>Id</th>
                    <th id="slug" th-edit>identifiant_logique</th>
                    <th id="php" th-choice th-sort th-filter tf-tooltip="Nom et chemin du fichier php en fonction de public/pages">Fichiers php</th>
                    <th id="twig" th-choice >Fichiers Twig </th>
                    <th id -"css" th-choice>Fichiers CSS</th>
                    <th id="js_header" th-edit>Fichiers JS Header</th>
                    <th id="js_footer" th-edit>Fichiers JS Footer</th>
                    <th  th-actions="delete,save">Actions</th>
                </tr>
            </thead>
            <tbody>
                {% for p in pages_tbl %}
                    <tr id="{{r.id}}" name="{{ r.id }}">
                        <td id="id_{{ p.id }}" name="id_{{ p.id }}">{{ p.id }}</td>
                        <td id="slug_{{ p.id }}" name="slug_{{ p.id }}">{{ p.slug }}</td>
                        <td id="php_{{ p.id }}" name="php_{{ p.id }}">{{ p.php }}</td>
                        <td id="twig_{{ p.id }}" name="twig_{{ p.id }}">{{ p.twig }}</td>
                        <td id="css_{{ p.id }}" name="css_{{ p.id }}">{{ p.css }}</td>
                        <td id="js_header_{{ p.id }}" name="js_header_{{ p.id }}">{{ p.js_header }}</td>
                        <td id="js_footer_{{ p.id }}" name="js_footer_{{ p.id }}">{{ p.js_footer }}</td>
                        <td class="td-actions"></td>
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>
<script type="module">
    import TableFlow from './{{ WEB_ASSETS }}/libs/tableFlow/src/tableFlow.js';
    
    window.table = new TableFlow({
        tableId: 'configurationTbl',
        debug: true,
        plugins: {
            names: ['Edit', 'Sort', 'Actions', 'Choice', 'Hide'],
            choice: {
                columns: {
                    php:{
                        type: 'multiple',
                        values:[
                            {% for p in php_tbl %}
                                { value: "{{ p.id }}", label: "{{ p.name }}" },
                            {% endfor %}
                        ],
                        searchable: {
                            enabled: true,
                            placeholder: 'Rechercher une page'
                        },
                        multiple: {
                            allowCustomValues: true,
                            separator: '|',
                            maxTags: 10,
                            showOrder: true,
                            orderPrefix: '',
                            orderSuffix: '-',
                            upDownButtons: true
                        }
                    },
                    twig:{
                        type: 'multiple',
                        values:[
                            {% for p in twig_tbl %}
                                { value: "{{ p.id }}", label: "{{ p.name }}" },
                            {% endfor %}
                        ],
                        searchable: {
                            enabled: true,
                            placeholder: 'Rechercher une page'
                        },
                        multiple: {
                            allowCustomValues: true,
                            separator: '|',
                            maxTags: 10,
                            showOrder: true,
                            orderPrefix: '',
                            orderSuffix: '-',
                            upDownButtons: true
                        }
                    }
                }
            },
            actions: {
                actionAttribute: 'th-actions',
                cellClass: 'td-actions',
                useIcons: true,
                debug: true,
                autoSave: false,
                actions: {
                    delete: {
                        handler: function(context) {
                            const url = "/main/actions.php";
                            actionRow(url, context.data, "sites", "delete").then(result => {
                                if (result) {
                                    successNotice('Ligne supprimée avec succès');
                                    context.tableHandler.removeRow(context.row);
                                } else {
                                    errorNotice('Erreur lors de la suppression de la ligne');
                                }
                            }).catch(error => {
                                errorNotice('Erreur lors de la suppression de la ligne');
                                console.error('Error:', error);
                            });
                        },
                        icon: '<button class="btn btn-glass btn-glass-red" tf-tooltip="Supprimer la ligne"><i class="fa fa-trash"></i></button>',
                        isDisabled: (data, row) => {
                            return data.super_admin === 1 || data.super_admin === '1';
                        }
                    },
                    save: {
                        handler: function(context) {
                            const url = "/main/actions.php";
                            const data = {
                                ...context.data,
                                table: 'configurationTbl',
                                action: 'addUpdate'
                            };
                            actionRow(url, data, "configuration", "addUpdate").then(result => {
                                if (result) {
                                    successNotice('Ligne mise à jour avec succès');
                                    context.tableHandler.markRowAsSaved(context.row, 'save');
                                } else {
                                    errorNotice('Erreur lors de la mise à jour de la ligne');
                                }
                            }).catch(error => {
                                errorNotice('Erreur lors de la mise à jour de la ligne');
                                console.error('Error:', error);
                            });
                        },
                        icon: '<button class="btn btn-glass btn-glass-green" tf-tooltip="Enregister les modifications"><i class="fa fa-save"></i></button>',
                        isDisabled: (data, row) => {
                            return data.super_admin === 1 || data.super_admin === '1';
                        }
                    }
                }
            }
        },
        pluginsPath: '../plugins'
    });
</script>