<div id="timeline">
    <div class="column left">
        {% set cieBtn=0 %}
        {% set half = (cieList|length // 2) %}
        {% for i in 0..half-1 %}
            {% set cie = cieList[i] %}
            <div class="cie__blk" id="{{ cie.cu }}">
                <div class="cie__title-grid cie__title" style="background-color: {{ cie.color }};">
                    <div class="cie__btn">
                        {%  if cieBtn==0 %}
                            {% set cieBtn=1 %}
                            <a onclick="showAddBlock()">
                                <i class="fa fa-circle-plus"></i>
                            </a>
                        {% endif %}
                        <div class="flex-h">
                            <input type="checkbox" id="switch-{{ cie.cu }}" class="cie-switch switch-input" value="{{cie.autoHide}}" onclick="showFcts()">
                            <label for="switch-{{ cie.cu }}" class="switch-glass" data-tooltip="Afficher/masquer les lignes vides"></label>
                        </div>
                    </div>
                    <div class="cie__name">
                        {{ cie.newName }}
                    </div>
                    <div class="pam__tph">
                        {%  if cieBtn==1 %}
                            {% set cieBtn=2 %}
                            <a onclick="showUpdatePAM(0)" class="cie__pam">
                                <i class="fa fa-circle-plus"></i>
                            </a>
                        {% endif %}
                        Tél PAM
                    </div>
                    <div class="timeline__grid grid__cie grid_{{ cie.cu }} gnbc_{{ {{NB_QUART_HEURE}} }}"></div>
                </div>
                <div class="cie__content">
                    {% for unit in cieContent[i] %}
                        {% include 'show/timeline/grid_template.twig' with {'unit': unit, 'cie': cie} %}
                    {% endfor %}
                </div>
            </div>
        {% endfor %}
    </div>
    <div class="column right">
        {% for i in half..cieList|length-1 %}
            {% set cie = cieList[i] %}
            <div class="cie__blk" id="{{ cie.cu }}">
                <div class="cie__title-grid cie__title" style="background-color: {{ cie.color }};">
                    <div class="cie__btn">
                        {%  if cieBtn==0 %}
                            {% set cieBtn=1 %}
                            <a onclick="showAddBlock()">
                                <i class="fa fa-circle-plus"></i>
                            </a>
                        {% endif %}
                        <div class="flex-h">
                            <input type="checkbox" id="switch-{{ cie.cu }}" class="cie-switch switch-input" value="{{cie.autoHide}}" onclick="showFcts()">
                            <label for="switch-{{ cie.cu }}" class="switch-glass" data-tooltip="Afficher/masquer les lignes vides"></label>
                        </div>
                    </div>
                    <div class="cie__name">
                        {{ cie.newName }}
                    </div>
                    <div class="pam__tph">
                        {%  if cieBtn==1 %}
                            {% set cieBtn=2 %}
                            <a onclick="showUpdatePAM(0)" class="cie__pam">
                                <i class="fa fa-circle-plus"></i>
                            </a>
                        {% endif %}
                        Tél PAM
                    </div>
                    <div class="timeline__grid grid__cie grid_{{ cie.cu }} gnbc_{{ {{NB_QUART_HEURE}} }}"></div>
                </div>
                <div class="cie__content">
                    {% for unit in cieContent[i] %}
                        {% include 'show/timeline/grid_template.twig' with {'unit': unit, 'cie': cie} %}
                    {% endfor %}
                </div>
            </div>
        {% endfor %}
    </div>
</div>

{# Suppression des anciens éléments de modal #}
{# <div id="modal-overlay" class="hidden"></div> #}
{# <div id="modal" class="modal__window hidden"></div> #}
<script type="text/javascript" src="{{WEB_ASSETS}}/js/show/timeline.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Vérification des variables globales requises
        if (typeof {{{{NB_QUART_HEURE}} === 'undefined' ||
            typeof {{CASE_POS_NOW === 'undefined' ||
            typeof {{INTERVAL === 'undefined') {
            console.error('Variables globales nécessaires non définies');
            return;
        }

        // Initialisation de ColorFlow
        if (!{{colorFlow) {
            {{colorFlow = new ColorFlow({
                customClass: 'glass',
                debug: false,
                presetColors: {{servicesColors || []
            });
        }

        // Ajouter les classes alternantes
        document.querySelectorAll('.grid__unit').forEach(function (element, index) {
            element.classList.add(index % 2 === 0 ? 'line__even' : 'line__odd');
        });

        // Initialiser les switches
        document.querySelectorAll('.cie-switch').forEach(switchElement => {
            switchElement.checked = switchElement.value === "1";
        });

        // Lire les paramètres d'URL
        const urlParams = new URLSearchParams({{location.search);
        let debug = 0;
        let debug_hour = 0;
        let debug_date = 0;

        if (urlParams.has('debug')) {
            debug = urlParams.get('debug');
            if (debug != "1") {
                if (urlParams.has('hour')) {
                    debug_hour = urlParams.get('hour');
                    const hourRegex = /^\d{2}:\d{2}$/;
                    if (!hourRegex.test(debug_hour)) {
                        errorNotice("Erreur", "Le paramètre hour doit être au format HH:MM");
                        debug_hour = 0;
                    }
                }
            }
        }

        // Initialisation de la timeline
        updateHours({{NB_QUART_HEURE}}, {{CASE_POS_NOW}}, {{INTERVAL}}, debug_hour);
        updateTimelineBlock({{NB_QUART_HEURE}}, {{CASE_POS_NOW}}, {{INTERVAL}}, debug_date, debug_hour);
        getPAM(debug_date, debug_hour).then(() => {
            autoHideLines().then(() => {
                updateTimelineRedBar({{NB_QUART_HEURE}}, {{CASE_POS_NOW}}, {{INTERVAL}}, debug_hour);
            });
        });
    });
</script>
